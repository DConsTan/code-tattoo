%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G1314) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 450 163
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 450 163
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: OPMPND+WenYue-GuDianMingChaoTi-NC-W5
%!FontType1-1.0: AAAAAH+WenYue-GuDianMingChaoTi-NC-W5 001.003%%CreationDate: 4/20/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (WenYue-GuDianMingChaoTi-NC-W5) readonly def/FamilyName (WenYue-GuDianMingChaoTi-NC-W5) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition 20 def/UnderlineThickness 40 defend readonly def/FontName /AAAAAH+WenYue-GuDianMingChaoTi-NC-W5 def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} forreadonly def/FontBBox {-195 -283 1196 944} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF1C5066694AE864EFC9A863DDE6D4B9CBD0D2B278C134BD8A60B58EA633EF6B5FC94A90A2396C406684764E79A3225DF9754A63B72D16FB185A5BCF2D58F4608684F782CE77F672453E416E53EEF765BB1FC0A7604BF819DD28AD73F6D857A26B50F7E388414B50F2E8DBF6CE483654A0716F946586F8BA2BE71149BB2C010F2FA300E1D1DE9AC30F09FB927CE9E9F34F5FF60F8719241B28139D8AEDC3A6CEA601DB9E54C92120E60C36878A3390FEF9F8EE6949EAEAC849422FE2609869446A9ABDF57284A1536F6F3C4ABA92E851A18C705EAD525D9E63B31BC06B9BE6FB274F3649CAAD0B3522BE05CD31BC80228E9ED50882027BB21B0C3C1C44A10309FBF244E71B0BBB7A2878FB008B977275B31A19269F5C94F697058E92A23B61A35E034C32559619377B0CF12525FC025B297984527181644C39AB832F23D3450218DE3295B31FB3BD7BD380F14876034AFAE253BA21C5C903C3E439234298DCE66EA759AB3C8F4B7C25115F0BFA4C6C9E3CE4E00AFD6C0BD228FE88CD3FDE39A00EDB5382B0DE77E2925F078C87179E00AFFBD081E4868D569543E31CD8AF244DCF739C603816874081CA62EE971A49295C049870422A6D6AD7724BE447AF9E3DB4422208092DDE7A289BD9E3BB95A7DD10AEC1EE3E8589FA4C03A4A9F49C23D9B6CE52F8C9FD7DA4A56A4402F809B1547CD82AA867410F1859ED6E7ECD5AF7BA950910FFB44361DF222E215995FB8CE3D1D2DE312B5DB41946E70111600AD59023DC9FF2C7929F419D19D711B96912C06ED0F0E6D18E8941D571C3BCFB148506139BFBF511D5F6A1E28001A79097D0CF36A5A05143BF1D3378F037F643371403044897AA17331E5C4A942D441CA2B7F39ABB4A358BDA0FE8E71B6347421A18172CF88CF4863AB716EF61C9F312ED7A36A72B435CC6C988B27E97FCDC3B603F737267C8786505DE9629E2F0BD4883BF5A002AB4C925B0276E2AD198103F892E69F29D6B6984482BF81F5670846D213EAE8008FB7CCC5704F8D705F284E23EC13BCD3BF5121682FEB6A69BD84D8A5B43B106235EA5B726126FA66A25EA9754CAD9B4F9B10A3078E4A43DD7462442D2B952BA4E145ECB9BE0FE876F35F5D119BBE82C2F96230561E204DE6E355A05819535BC0ED803254A96E833B2A5284D106BC9C7AE28F578DF163C896A9D081F34858B43AFC38764FB52F5FF496BA3DE42B2557CDAAEDCAF9646D466D6F6C958DC16139748658E36836D2DBEF1C2B301DB7AAFC0BCCDA149157E076E50BB4F33AB7465C7AB1ADE8102DDDD9EEC1FA8C600C33FCA26A14800C1EE28DF2E42F5A41696E448F03C8066134571AAE7FA5FB843E98C3E87248B3D07D84469EE0CEF1B43D94D7A4A129214B6E9D1C00AE2D86AE3031700BE408A4F43CD63F8C32FAE965B6B48102EF0482449DCEFF87EA33B87BF7ABAE27CBA7F61D0C492C49580D8CF61E36ED3601F5783A7E89A488DEB178F2B9EA0A392D134B71311FDCF2914F917B8D579E95D25E274B62B4837BFCDF2E0C0EB3DB966D60BFBF9978DD6B92F8C6C04AFFEC00FF16544ECC2B19DF9E4116A4C12392E7F4853AB7100D7AF646A15E7BBDED7D2AFD5104841E4152EC870A3417ACC2AD94FE7BD701C6545F7B94CDE2A9192D0BAFC0A4F605BD068B07608B5CB69B80B4721BC6D24179BA5AC7873C1E67DC46C12815E06C03C36A597887F840B3968D4FA8A5BC71C97A20F23027B53B4578A8349C3471C00B50D6DF6A5A5EA28AA6053F843B0E04B80C3ECE1B972F8AADFC3808734C634E800D374B1627D63C40BD9FB2143F0F55F15F1379FB890ACBDD0B09FB5AC5494650EA151DCC7DD66A0EC5AB8BE200500FF3325077CAAE686EC287E4CA2543F1D20778132BFE3D577DD7A19688622FE62A30BFAFB0AED872F0A58B4EA709F9C508EF7566B80EB4A2A3FF0B6746DB529C56DA07ABF197A9AAB43B219244F055A12644C37E749E783FA6CD7BA04666B106F0F22178C7677F52041B6A84CFB46EE4CABE03EA68ECF0EB73C1558D0C7FA22A33FA7F1DD378CBDD2D69EE8434718DA604ACC1E3BC6B07D5FE7779BEBB7ADAA6A2D91A15FF2AAC2AEEDA1AEDE8264C3BF06D6D8B87F39E8AB2E68ADB428553DAAA55E04779F87F3F510AB1BF1DE2DF2F0332FB7E021E08F404F07DC457D40EA2426CBA8E7B5DA26F69C74524174CD84B664F322571DE995CDF0399FDDF9226B3668F2CA007EEE3C8E43B3A1EFFE1A391DDE84CA6E33C311046CFAE8722BCA961117A23A6D48F3B07AEA5366F9E2D7E9468215613D7340696025353A9DDB826718B3382BFB67690C1B546176BA34BDB93E28D08425982FA40AE15CC44329FE27C0632E3ED1F9AF141337F3BF5E05A8DB056F674D3DEC6E146BB026AEA07F3429A06C4F1539027C5C8A8829A75F47BEAA664B43108CB0ECB20409D567DED7B578191A7FE9613890DCBB9DEEFFD4F8BAE6B014247DD710F027D5DAD2259C7804129B11467344C2357959225C18C721D3C6B5F1E2828DEC1CE52F83526EC262FD0E3D1C46474119C5E65C477C68644FC5F9B8AA8684340F2D31B7C42E7E403D60A41CBF7183DEC2DD44A797B782F229E419C76BD94EB85D4AE62FA2C39C8BBD9E2134B923BE1407CB3C536278164E8091118B7CEE91098D3150128749FCB5C2B62A4637420D0B978D1B3F41977D5956D02B317B25FC00644B5E2185BE866D07C5CF3017F95C526C08252FD0E27C1D9CD1682034A9F465A56CCA259BEBA3467D7021A57687CA31416609002A0B958903783E93720E52F65C2B5DF7EEA7CABFE783E94CCA72081ADFBEE7915F335AE87A4CE232AF57AB8DBEA7FF03D522FEE08CAA1C8596C68266CB6A552B177720FF1C6EFA3ACF756F941643E2612E8A71E0AA2242A1AA793238CA12513A50245E8DF2BF23A9E8273F0812773349FA2E8FC2E834CAA4EF5C2F1016DDF1046D748B2A6B67557C3696ADDB7CBC6F0E0A7FFA53E72CBF04BF52062AC5492DF22B5CADD7A58AC9A67152D18F6D0FA9E17C8FC549EEFB601EBFEE4D14179452E9E1756B78317C20DDC55232B2F42A2D088A05E9BAF4FDB62B224F71DA59CB5DC9D7FD8A435CAA7BC78BF96B763BE87534B801C455C5EEDCC126DC7AB1A1B8BE9A15754BF1AB39190CA29C702640C5DBD56430CDAE36B7D8ED505559DAB6EEF78F4342E691E7B4BD8B5DE7E8B17A7D6C0949D977F0708DAF620C2254F622490CB3BD015265DF5F18D9533C39F44C3D36015E3E772C6854639CDAB274E09B3B0608D1FB699DA0E6485D30D7FF1FEDB4949845D25B98BC81EC0FD6B3B676C13E9619BCDEA157581D12FE654E70CEE49ABD436D646D9F037E4261108952F0DAFC8C168CFF5736328EE27D865FCAE7D9BB972F4A1462C726EBA6AED78F62DF152ED97E8AD6AFB6E01C073999C7DA709405E0CEF91009015EACAB33D960D50BB76E27308EA1A2D776C42ABE2BB0592A7379779C86D78D9403F4BE658528CC68B710FB26FBFF3188DD57C75C5CE9C096849DC0C497AE85B214F1DD76D490204568A86E9B390D26CDBA2DAE88D012992C0E18190B21BEECCB3DF758B0E318153386B815700B7BD1954198D97EA2B7E788E230A0F2BB9F9D81A327CAB932389127FB4DB6D85387904640269B051189199DC04679BB37A40C36043B1F3C84E8671CE033BFAE30B9736D538F0B94314A18587897F6524ACF6723D09444EE8BAF3781D1D4B8AC5BE5511BC2504EE889C25BB00AC9BC21C184A203036504F0E11147478B4D28CA56748121245B2FFF92E0FB189E4079A8E8DE37A21F082DED2AD50069B0024E010665237601F08846C6185F66E49A46B3DCB05DE71A9F86A7B51421EA2F0961C9D913F5A909BB9121527A3CE23BA565A84175B85A7CA17E1A8623B0EBF9488FBC26D3B623142D6E9DF72ABE0079A980426BDACEB2398F0DFA8137DAAFEDE1EE211EEBDDD4CF8342D315C58262F9B67B20A5E1A575DE570CAD53913C22248205A93F50F0E5EBCE901E9C720AC7D32247C0D939A69DCD8901CDE66209428D7655D7F321B935B309FB61D51B2C633ED3AB283FDFC4959DC30743F2F6F6FD97796B1CF675FDA157D3BF37C617CCD694C02C538BC7B415C24EEA6027DA51F6772C9079108390BB78E0A9155ED1940F076BE8BAC47DDFC216D0B0ACC4C3B530F28F5F192658BD3612585F5AB2976D79EA5C12459FA6C8EE3240476CEA452D24AC9B8869CFBAD16343640A598A071A2CF60FD180E98DE3C67763A7A0C15B5266AF8531CCAE51D265649E14FF52B2DC42A08F6394704111A807CD3430021002F2B259D4117BA2ADFF3D2151EF613B9CC31091EAAA64D645DC5B4BC931C157F79A94A77CB5D3C942AC747C4D880C06E33B7FE857D02D06B8BE7D58BA3CEB7901E3761DC49EFBA43B6E2C0EE09B16A79FE5BFF8F11193480933588F304F749CFED31541A6399425FC21978CBEBDF39AEABDD4B88A6E208B1B32DC8FD4C2693F2DCCC04FBDF27698D34A294A49B1C1E8FBB92D80FED12ED489687F3823CD695AB861BD4A72293E76C42F36C7034A0A8667B59879685DDC1821092A246FA1CD138CF7CB18DEBA6122F8B8022A1E964F4C186BC2690AC9E7909956A18BB5CA4878977A2A7483ED4C2FCDBB019242303DB7A3BCC879DBB8F94A1703481B4A999ECD312C481C100319328F529187F7E5B9001EAEFC923D80B37C3AC41E6A8F6E221695FBABA1EF59D97F8AA0E940BEE2E4DC1197C337E7C1500ED087F690EF355956D69606178106947E661FF647AD8D09315866463583D5BD2390DC375AB4A0DD0FB658F4E271F1D3C37E1CA3BD2D059263D128463CE93E9CC0D26A60CFAB53C098AE47B0663F65BB5408B9EA8911CFF6784897D1C7B6B2B2FA96530581462AEA98F01BD8E48C8E923F94C16FF1247505BD23A5667DEC05AB78F83B3E7D0097F372F5D663620CAA01E2DD8D44F74D7C1D7F9ED8190788CADB928A3E9D575227216AACAC6AEB2836A8E108817CB7EEC70F5F2AEC42D4BA1F4B882FE2AB1137A630409366912B9C12761BF34C24602A8DB9386D53CB781503F9782763A95523D973BEA0B983D307FDCC5802047459833C22706C198FD6CEFD8B1315E44041691D1A5697BFA33A58B458242194C3E2743F442F222F80B7AB03A2E5E71C44EE44594DC0DFBDAAA10E5444585B529BE06F68B21E7A12EE4B73576A365703F618575FD32B7B6BE47E3521048375A0FF14E6E5EFB3AAC8B3881442308517D36D55A6CA30CACC0E3464D2D5EFD67A0EEEA87737375647FCAB4B5338F7E8FA83BD4CF5792F91639B61602B04673D2DD095A3B37A7C9D5D75D5BD91822DF859099F2ECB5FD131C0070CD2D8EE8D70C0C4FB52300BFAC9620CA7010871762E533D119A0BBBAAC07C92A4F42E1DDCEDC459D2C9EF8970E1787BD4A4D9B399A0816ACC8C8D60E8931007DFF7CC3FFA7B884E1B747D6F5883D621E4682AC770972E52B664EFC0F15810FB31890E3CB2850BBCFB6B7773F5B9B33909A2616ED784E93DB14E6CB753BAB8655552CBDD8037516F1E2174D3F1AEC2D18B2B72F141E056247EB9185F7502C09BC2FEA5037F88E1A977538CB544387FFB1A3121D6A53F4E739B5349D02FBE1A89C3F24B24EA74D298973BE3C27155AECD3B7FC909B3F5048A6E0C8B664C8078A26F78F42A366470489BB444B5DB5182C784F2405A65EA90E9EEAEB46D104C61E295566F307F740008F99020D5F1BD97523DDC0EF56E8A73680CAB742ED78CE4DC3600F8D9314A44B202424263195897A50AF243C36D8EE7707DE7D514FDEDC5C4AC6D92A34CE92D3CD24F07D1419320D77780C96FCF49744E7510EEA0D737595D6A0FC71F0647599EDAF7B7A791BDC9EF76A124F486DE476ABD286DF1AA20EDD8A43D2E85E41115B65417A60A0B795AA12897EB72C58CDD22ECA85904C5D749A5E6F7D16B03B1641864D4C0C655D8AA5F2C73AA8BA1D30E377D6379F8B328EBF321262F9621860101E86793465125F7090569908BE1618A9FA8829CA86561F24226FF0639055ABE4DD3723CF3D79EB8ABBCF78F72FA8601D83D78265E819F4596E27166BC4C16B0D583A1FB6E03F02CF001A7AD3EE414324FC412734A374AE7FC9C71843056DE150F977E5F7D5359EE7DD613521280350AA03E6B32BC7E8B517171F832E1AF43F00AAEE2071B0D212E375745348C682D9DD3B4E95FA33CBB5E8914EA6F746D8CBB977C96248D21998680F88012E135194F1522AC571ACE10359CD1A37128BEBD5A0EF57C0762A5094B7CA720E1DA3D4FCD31A997D51DABAE899F3416515639D54A63AD412BA142787170ECE739D329C1F549B2D92CC11690AD32812667E722A02B542857D02112C4FD5B62DD96BAF828F0CEFB1B3440FF35D196884EFB22DE1151987D8C847C4A903F027832BD10590212E2388FC57F59B7245DF2B7F6FD2B12CCCC0857CE462771EDF42CE246FA1C152EDAAD1839B3423B8CEC516A76E0A41393776631053C18FCC1D94D8AF96E89387C780C1DBFF6A37E36D2E154340B2B3564C3A0E6C070C1940BFEEF042F6BEAC5CABC9DAF7CA866360F0FD5C71819D52A64D1DC5624B35A09CEE89D27B65EAE983A7561BC784493A01ADAABAA943108821951908A4E40E07A4A7FCF3E47E6E7B667B214A4431881BFC3D720997B1CCD6F5EEF0E9FF4050E3100916C6B5FB7A661B0A2259CE7315D9B863B36A88F46F36EFA3444B164B3383D4952889A352F2B7BF197B6C76260D9F401E83389E62380ECD199F2302D0B2CBF99AC1EEAB475C9AD29D2B3AA379771A5CB448454B3A09A349CA1E93DFBD1BD915C08498FB54987C6573C2CFC6F453E86B84C35E42E2EFA235E0584621CD39DCCBB002537E2A55D6F2F99DDBD924CC5D434D45477190B9C3787ED0B93BB904EA73089F19847887506801F6E4FB79EF3CA0C88F95CF6BBF2AC8D96B66427689E8AD5DEB15747E1B6FF1B1BBC937B0CE9E58E3697F4210BB894424847028C2210A64221F07ED47C6C7B3CCA938094C2343987CE9B52400F6EA83762FD13A8EDC5FB2280956D69679FE3B78507CD5ABDEC034A2F3F51C3287FC7F5C8642DA600578D8F737486CF10EE13BE0F6E97F831E6A13E71D9FFB74FDDB6B7B3CA45D1951E06D94283F218C7814DA1902CF627616E779FB13E292E9197F07ADC7DB8947312CBDD37D6CD9033D2B653BFB123807123BFE1EE751E23445F398079CBBF945EF88E277D14080A434D477860D835B14DE87BA77E759FDC657252C3AE88F49BD8789638DF4249BE3D09A9894E9C61FEA61F5F1520F8E1FF36AA6C3F273E693D80A57C86FD14337F4B7C8BD4353324F5782977F8FE39749709AEAF603D1EAC1A6D424044BD9F1F301913666983514CB8ABFFF17EC51B9108482C1ED93B6C649004E90F03946D1E81D28AC3E6BE77A5F29F64E12B1B194A41AD0D4C156B3807C671FB05D2951C74130728700635599564D095C27FA8F96AD343ABB9755F1A7FD56FB03EF60ABBFC8114E608569E30092CC406D99A5A45CB1A4ACE5D3F5D279979E0B003FF51CC1C60DD231BB0AD039899896045C0D6D458682EC4850A2CDBC372289D65B1C833A1B2AA70B38A9E0CEB612F26852F302B5A0CF5AA8F9D5C1D8636CD947C2D6B2BA5F829A831A071948EE4FC4E5449A7FCA2038F35DF62264312D7257BADD9F973374A64C178BB1C818A2377C04EF4638D04300DFD77440F5EB2AC013815777192FCABDE25A3B1E07149549AC1B2ADECD3D907CA2DC74B1477B93807D36B84D74B27F05BA5500D7AC4FB9961FC204C797B3E960F581BFA79544B1A2F7D692E16646E6F20069A84BE72B3A48731E2435367E24534F36C7796AA03854FC13CC90D74A9FC881C3D8E85B76FBB10040F0DADEE2394BBBFE6CC689E9AE04EC52C52383F10FA0AE69AD99FFF5A8BA769AF472C7B8587328759DB9558D6C08B6421C1392068A4613B9957FBDC27DB7E74DC276AAF9BE1B76FE58406CF5349ADDE09D39A5D01E100516CB839EDAEBCDDFBC304932ABF4B35384510C768E5DEDFFE776D3DDE74551160405AD8FA35D436CD15926D6060B133E5ED6F938F6B303EDD53A1B4248A0DDD6F3F85768D0C484E5DA4F4654972178C1591805659FDF877761E5740E90748DFFF039D12484D10A6DE79F63AEAC8B5833472707D9AD88B07BF050632D1662E4A29D91E541FC28BE2051F215522BE51C180B984AA55B49ACEDABC4CC953B7EC4EDFF6C5F1F1F95FE9D93D9ABBC952670E582DC398F84F8A2B04874BA3E39DB40C59602E219211533F6F9F6049E8BBC2FA53D983E6A31E84FCE124EFFB36ADA32E8C50046D6E8AFD3820531EB3B040196ABC1B8050B07ABCC2FE3A9E3CE982626AE1AC30E92EC26144F905CE1593B4F1400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType1-1.0: AAAAAI+WenYue-GuDianMingChaoTi-NC-W5 001.003%%CreationDate: 4/20/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (WenYue-GuDianMingChaoTi-NC-W5) readonly def/FamilyName (WenYue-GuDianMingChaoTi-NC-W5) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition 20 def/UnderlineThickness 40 defend readonly def/FontName /AAAAAI+WenYue-GuDianMingChaoTi-NC-W5 def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 0 /cid1010 putdup 1 /cid1026 putdup 2 /cid1110 putdup 3 /cid1390 putdup 4 /cid1507 putdup 5 /cid3146 putdup 6 /cid3670 putdup 7 /cid3728 putreadonly def/FontBBox {-195 -283 1196 944} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF1C5066694AE864EFC9A863DDE6D4B9CBD0D2B278C134BD8A60B58EA633EF6B5FC94A90A2396C406684764E79A3225DF9754A63B72D16FB185A5BCF2D58F4608684F782CE77F672453E416E53EEF765BB1FC0A7604BF819DD28AD73F6D857A26B50F7E388414B50F2E8DBF6CE483654A0716F946586F8BA2BE71149BB2C010F2FA300E1D1DE9AC30F09FB927CE9E9F34F5FF60F8719241B28139D8AEDC3A6CEA601DB9E54C92120E60C36878A3390FEF9F8EE6949EAEAC849422FE2609869446A9ABDF57284A1536F6F3C4ABA92E851A18C705EAD525D9E63B31BC06B9BE6FB274F3649CAAD0B3522BE05CD31BC80228E9ED50882027BB21B0C3C1C44A10309FBF244E71B0BBB7A2878FB008B977275B31A19269F5C94F697058E92A23B61A35E034C32559619377B0CF12525FC025B297984527181644C39AB832F23D3450218DE3295B31FB3BD7BD380F14876034AFAE253BA21C5C903C3E439234298DCE66EA759AB3C8F4B7C25115F0BFA4C6C9E3CE4E00AFD6C0BD228FE88CD3FDE39A00EDB5382B0DE77E2925F078C87179E00AFFBD081E4868D569543E31CD8AF244DCF739C603816874081CA62EE971A49295C049870422A6D6AD7724BE447AF9E3DB4422208092DDE7A289BD9E3BB95A7DD10AEC1EE3E8589FA4C03A4A9F49C23D9B6CE52F8C9FD7DA4A56A4402F809B1547CD82AA867410F1859ED6E7ECD5AF7BA950910FFB44361DF222E215995FB8CE3D1D2DE312B5DB41946E70111600AD59023DC9FF2C7929F419D19D711B96912C06ED0F0E6D18E8941D571C3BCFB148506139BFBF511D5F6A1E28001A79097D0CF36A5A05143BF1D3378F037F643371403044897AA17331E5C4A942D441CA2B7F39ABB4A358BDA0FE8E71B6347421A18172CF88CF4863AB716EF61C9F312ED7A36A72B435CC6C988B27E97FCDC3B603F737267C8786505DE9629E2F0BD4883BF5A002AB4C925B0276E2AD198103F892E69F29D6B6984482BF81F5670846D213EAE8008FB7CCC5704F8D705F284E23EC13BCD3BF5121682FEB6A69BD84D8A5B43B106235EA5B726126FA66A25EA9754CAD9B4F9B10A3078E4A43DD7462442D2B952BA4E145ECB9BE0FE876F35F5D119BBE82C2F96230561E204DE6E355A05819535BC0ED803254A96E833B2A5284D106BC9C7AE28F578DF163C896A9D081F34858B43AFC38764FB52F5FF496BA3DE42B2557CDAAEDCAF9646D466D6F6C958DC16139748658E36836D2DBEF1C2B301DB7AAFC0BCCDA149157E076E50BB4F33AB7465C7AB1ADE8102DDDD9EEC1FA8C600C33FCA26A14800C1EE28DF2E42F5A41696E448F03C8066134571AAE7FA5FB843E98C3E87248B3D07D84469EE0CEF1B43D94D7A4A129214B6E9D1C00AE2D86AE3031700BE408A4F43CD63F8C32FAE965B6B48102EF0482449DCEFF87EA33B87BF7ABAE27CBA7F61D0C492C49580D8CF61E36ED3601F5783A7E89A488DEB178F2B9EA0A392D134B71311FDCF2914F917B8D579E95D25E274B62B4837BFCDF2E0C0EB3DB966D60BFBF9978DD6B92F8C6C04AFFEC00FF16544ECC2B19DF9E4116A4C12392E7F4853AB7100D7AF646A15E7BBDED7D2AFD5104841E4152EC870A3417ACC2AD94FE7BD701C6545F7B94CDE2A9192D0BAFC0A4F605BD068B07608B5CB69B80B4721BC6D24179BA5AC7873C1E67DC46C12815E06C03C36A597887F840B3968D4FA8A5BC71C97A20F23027B53B4578A8349C3471C00B50D6DF6A5A5EA28AA6053F843B0E04B80C3ECE1B972F8AADFC3808734C634E800D374B1627D63C40BD9FB2143F0F55F15F1379FB890ACBDD0B09FB5AC5494650EA151DCC7DD66A0EC5AB8BE200500FF3325077CAAE686EC287E4CA2543F1D20778132BFE3D577DD7A19688622FE62A30BFAFB0AED872F0A58B4EA709F9C508EF7566B80EB4A2A3FF0B6746DB529C56DA07ABF197A9AAB43B219244F055A12644C37E749E783FA6CD7BA04666B106F0F22178C7677F52041B6A84CFB46EE4CABE03EA68ECF0EB73C1558D0C7FA22A33FA7F1DD378CBDD2D69EE8434718DA604ACC1E3BC6B07D5FE7779BEBB7ADAA6A2D91A15FF2AAC2AEEDA1AEDE8264C3BF06D6D8B87F39E8AB2E68ADB428553DAAA55E04779F87F3F510AB1BF1DE2DF2F0332FB7E021E08F404F07DC457D40EA2426CBA8E7B5DA26F69C74524174CD84B664F322571DE995CDF0399FDDF9226B3668F2CA007EEE3C8E43B3A1EFFE1A391DDE84CA6E33C311046CFAE8722BCA961117A23A6D48F3B07AEA5366F9E2D7E9468215613D7340696025353A9DDB826718B3382BFB67690C1B546176BA34BDB93E28D08425982FA40AE15CC44329FE27C0632E3ED1F9AF141337F3BF5E05A8DB056F674D3DEC6E146BB026AEA07F3429A06C4F1539027C5C8A8829A75F47BEAA664B43108CB0ECB20409D567DED7B578191A7FE9613890DCBB9DEEFFD4F8BAE6B014247DD710F027D5DAD2259C7804129B11467344C2357959225C18C721D3C6B5F1E2828DEC1CE52F83526EC262FD0E3D1C46474119C5E65C477C68644FC5F9B8AA8684340F2D31B7C42E7E403D60A41CBF7183DEC2DD44A797B782F229E419C76BD94EB85D4AE62FA2C39C8BBD9E2134B923BE1407CB3C536278164E8091118B7CEE91098D3150128749FCB5C2B62A4637420D0B978D1B3F41977D5956D02B317B25FC00644B5E2185BE866D07C5CF3017F95C526C08252FD0E27C1D9CD1682034A9F465A56CCA259BEBA3467D7021A57687CA31416609002A0B958903783E93720E52F65C2B5DF7EEA7CABFE783E94CCA72081ADFBEE7915F335AE87A4CE232AF57AB8DBEA7FF03D522FEE08CAA1C8596C68266CB6A552B177720FF1C6EFA3ACF756F941643E2612E8A71E0AA2242A1AA793238CA12513A50245E8DF2BF23A9E8273F0812773349FA2E8FC2E834CAA4EF5C2F1016DDF1046D748B2A6B67557C3696ADDB7CBC6F0E0A7FFA53E72CBF04BF52062AC5492DF22B5CADD7A58AC9A67152D18F6D0FA9E17C8FC549EEFB601EBFEE4D14179452E9E1756B78317C20DDC55232B2F42A2D088A05E9BAF4FDB62B224F71DA59CB5DC9D7FD8A435CAA7BC78BF96B763BE87534B801C455C5EEDCC126DC7AB1A1B8BE9A15754BF1AB39190CA29C702640C5DBD56430CDAE36B7D8ED505559DAB6EEF78F4342E691E7B4BD8B5DE7E8B17A7D6C0949D977F0708DAF620C2254F622490CB3BD015265DF5F18D9533C39F44C3D36015E3E772C6854639CDAB274E09B3B0608D1FB699DA0E6485D30D7FF1FEDB4949845D25B98BC81EC0FD6B3B676C13E9619BCDEA157581D12FE654E70CEE49ABD436D646D9F037E4261108952F0DAFC8C168CFF5736328EE27D865FCAE7D9BB972F4A1462C726EBA6AED78F62DF152ED97E8AD6AFB6E01C073999C7DA709405E0CEF91009015EACAB33D960D50BB76E27308EA1A2D776C42ABE2BB0592A7379779C86D78D9403F4BE658528CC68B710FB26FBFF3188DD57C75C5CE9C096849DC0C497AE85B214F1DD76D490204568A86E9B390D26CDBA2DAE88D012992C0E18190B21BEECCB3DF758B0E318153386B815700B7BD1954198D97EA2B7E788E230A0F2BB9F9D81A327CAB932389127FB4DB6D85387904640269B051189199DC04679BB37A40C36043B1F3C84E8671CE033BFAE30B9736D538F0B94314A18587897F6524ACF6723D09444EE8BAF3781D1D4B8AC5BE5511BC2504EE889C25BB00AC9BC21C184A203036504F0E11147478B4D28CA56748121245B2FFF92E0FB189E4079A8E8DE37A21F082DED2AD50069B0024E010665237601F08846C6185F66E49A46B3DCB05DE71A9F86A7B51421EA2F0961C9D913F5A909BB9121527A3CE23BA565A84175B85A7CA17E1A8623B0EBF9488FBC26D3B623142D6E9DF72ABE0079A980426BDACEB2398F0DFA8137DAAFEDE1EE211EEBDDD4CF8342D315C58262F9B67B20A5E1A575DE570CAD53913C22248205A93F50F0E5EBCE901E9C720AC7D32247C0D939A69DCD8901CDE66209428D7655D7F321B935B309FB61D51B2C633ED3AB283FDFC4959DC30743F2F6F6FD97796B1CF675FDA157D3BF37C617CCD694C02C538BC7B415C24EEA6027DA51F6772C9079108390BB78E0A9155ED1940F076BE8BAC47DDFC216D0B0ACC4C3B530F28F5F192658BD3612585F5AB2976D79EA5C12459FA6C8EE3240476CEA452D24AC9B8869CFBAD16343640A598A071A2CF60FD180E98DE3C67763A7A0C15B5266AF8531CCAE51D265649E14FF52B2DC42A08F6394704111A807CD3430021002F2B259D4117BA2ADFF3D2151EF613B9CC31091EAAA64D645DC5B4BC931C157F79A94A77CB5D3C942AC747C4D880C06E33B7FE857D02D06B8BE7D58BA3CEB7901E3761DC49EFBA43B6E2C0EE09B16A79FE5BFF8F11193480933588F304F749CFED31541A6399425FC21978CBEBDF39AEABDD4B88A6E208B1B32DC8FD4C2693F2DCCC04FBDF27698D34A294A49B1C1E8FBB92D80FED12ED489687F3823CD695AB861BD4A72293E76C42F36C7034A0A8667B59879685DDC1821092A246FA1CD138CF7CB18DEBA6122F8B8022A1E964F4C186BC2690AC9E7909956A18BB5CA4878977A2A7483ED4C2FCDBB019242303DB7A3BCC879DBB8F94A1703481B4A999ECD312C481C100319328F529187F7E5B9001EAEFC923D80B37C3AC41E6A8F6E221695FBABA1EF59D97F8AA0E940BEE2E4DC1197C337E7C1500ED087F690EF355956D69606178106947E661FF647AD8D09315866463583D5BD2390DC375AB4A0DD0FB658F4E271F1D3C37E1CA3BD2D059263D128463CE93E9CC0D26A60CFAB53C098AE47B0663F65BB5408B9EA8911CFF6784897D1C7B6B2B2FA96530581462AEA98F01BD8E48C8E923F94C16FF1247505BD23A5667DEC05AB78F83B3E7D0097F372F5D663620CAA01E2DD8D44F74D7C1D7F9ED8190788CADB928A3E9D575227216AACAC6AEB2836A8E108817CB7EEC70F5F2AEC42D4BA1F4B882FE2AB1137A630409366912B9C12761BF34C24602A8DB9386D53CB781503F9782763A95523D973BEA0B983D307FDCC5802047459833C22706C198FD6CEFD8B1315E44041691D1A5697BFA33A58B458242194C3E2743F442F222F80B7AB03A2E5E71C44EE44594DC0DFBDAAA10E5444585B529BE06F68B21E7A12EE4B73576A365703F618575FD32B7B6BE47E3521048375A0FF14E6E5EFB3AAC8B3881442308517D36D55A6CA30CACC0E3464D2D5EFD67A0EEEA87737375647FCAB4B5338F7E8FA83BD4CF5792F91639B61602B04673D2DD095A3B37A7C9D5D75D5BD91822DF859099F2ECB5FD131C0070CD2D8EE8D70C0C4FB52300BFAC9620CA7010871762E533D119A0BBBAAC07C92A4F42E1DDCEDC459D2C9EF8970E1787BD4A4D9B399A0816ACC8C8D60E8931007DFF7CC3FFA7B884E1B747D6F5883D621E4682AC770972E52B664EFC0F15810FB31890E3CB2850BBCFB6B7773F5B9B33909A2616ED784E93DB14E6CB753BAB8655552CBDD8037516F1E2174D3F1AEC2D18B2B72F141E056247EB9185F7502C09BC2FEA5037F88E1A977538CB544387FFB1A3121D6A53F4E739B5349D02FBE1A89C3F24B24EA74D298973BE3C27155AECD3B7FC909B3F5048A6E0C8B664C8078A26F78F42A366470489BB444B5DB5182C784F2405A65EA90E9EEAEB46D104C61E295566F307F740008F99020D5F1BD97523DDC0EF56E8A73680CAB742ED78CE4DC3600F8D9314A44B202424263195897A50AF243C36D8EE7707DE7D514FDEDC5C4AC6D92A34CE92D3CD24F07D1419320D77780C96FCF49744E7510EEA0D737595D6A0FC71F0647599EDAF7B7A791BDC9EF76A124F486DE476ABD286DF1AA20EDD8A43D2E85E41115B65417A60A0B795AA12897EB72C58CDD22ECA85904C5D749A5E6F7D16B03B1641864D4C0C655D8AA5F2C73AA8BA1D30E377D6379F8B328EBF321262F9621860101E86793465125F7090569908BE1618A9FA8829CA86561F24226FF0639055ABE4DD3723CF3D79EB8ABBCF78F72FA8601D83D78265E819F4596E27166BC4C16B0D583A1FB6E03F02CF001A7AD3EE414324FC412734A374AE7FC9C71843056DE150F977E5F7D5359EE7DD613521280350AA03E6B32BC7E8B517171F832E1AF43F00AAEE2071B0D212E375745348C682D9DD3B4E95FA33CBB5E8914EA6F746D8CBB977C96248D21998680F88012E135194F1522AC571ACE10359CD1A37128BEBD5A0EF57C0762A5094B7CA720E1DA3D4FCD31A997D51DABAE899F3416515639D54A63AD412BA142787170ECE739D329C1F549B2D92CC11690AD32812667E722A02B542857D02112C4FD5B62DD96BAF828F0CEFB1B3440FF35D196884EFB22DE1151987D8C847C4A903F027832BD10590212E2388FC57F59B7245DF2B7F6FD2B12CCCC0857CE462771EDF42CE246FA1C152EDAAD1839B3423B8CEC516A76E0A41393776631053C18FCC1D94D8AF96E89387C780C1DBFF6A37E36D2E154340B2B3564C3A0E6C070C1940BFEEF042F6BEAC5CABC9DAF7CA866360F0FD5C71819D52A64D1DC5624B35A09CEE89D27B65EAE983A7561BC784493A01ADAABAA943108821951908A4E40E07A4A7FCF3E47E6E7B667B214A4431881BFC3D720997B1CCD6F5EEF0E9FF4050E3100916C6B5FB7A661B0A2259CE7315D9B863B36A88F46F36EFA3444B164B3383D4952889A352F2B7BF197B6C76260D9F401E83389E62380ECD199F2302D0B2CBF99AC1EEAB475C9AD29D2B3AA379771A5CB448454B3A09A349CA1E93DFBD1BD915C08498FB54987C6573C2CFC6F453E86B84C35E42E2EFA235E0584621CD39DCCBB002537E2A55D6F2F99DDBD924CC5D434D45477190B9C3787ED0B93BB904EA73089F19847887506801F6E4FB79EF3CA0C88F95CF6BBF2AC8D96B66427689E8AD5DEB15747E1B6FF1B1BBC937B0CE9E58E3697F4210BB894424847028C2210A64221F07ED47C6C7B3CCA938094C2343987CE9B52400F6EA83762FD13A8EDC5FB2280956D69679FE3B78507CD5ABDEC034A2F3F51C3287FC7F5C8642DA600578D8F737486CF10EE13BE0F6E97F831E6A13E71D9FFB74FDDB6B7B3CA45D1951E06D94283F218C7814DA1902CF627616E779FB13E292E9197F07ADC7DB8947312CBDD37D6CD9033D2B653BFB123807123BFE1EE751E23445F398079CBBF945EF88E277D14080A434D477860D835B14DE87BA77E759FDC657252C3AE88F49BD8789638DF4249BE3D09A9894E9C61FEA61F5F1520F8E1FF36AA6C3F273E693D80A57C86FD14337F4B7C8BD4353324F5782977F8FE39749709AEAF603D1EAC1A6D424044BD9F1F301913666983514CB8ABFFF17EC51B9108482C1ED93B6C649004E90F03946D1E81D28AC3E6BE77A5F29F64E12B1B194A41AD0D4C156B3807C671FB05D2951C74130728700635599564D095C27FA8F96AD343ABB9755F1A7FD56FB03EF60ABBFC8114E608569E30092CC406D99A5A45CB1A4ACE5D3F5D279979E0B003FF51CC1C60DD231BB0AD039899896045C0D6D458682EC4850A2CDBC372289D65B1C833A1B2AA70B38A9E0CEB612F26852F302B5A0CF5AA8F9D5C1D8636CD947C2D6B2BA5F829A831A071948EE4FC4E5449A7FCA2038F35DF62264312D7257BADD9F973374A64C178BB1C818A2377C04EF4638D04300DFD77440F5EB2AC013815777192FCABDE25A3B1E07149549AC1B2ADECD3D907CA2DC74B1477B93807D36B84D74B27F05BA5500D7AC4FB9961FC204C797B3E960F581BFA79544B1A2F7D692E16646E6F20069A84BE72B3A48731E2435367E24534F36C7796AA03854FC13CC90D74A9FC881C3D8E85B76FBB10040F0DADEE2394BBBFE6CC689E9AE04EC52C52383F10FA0AE69AD99FFF5A8BA769AF472C7B8587328759DB9558D6C08B6421C1392068A4613B9957D30E0A498C9C76D03B645E230CAA6E960AE128D6EEEA4E8B18E74B30EC33064E82B283AA4ED14A3C6B6D6E414E75DA8A7E67B3C76763161A9CE411D577B8FEB4E14E14376B11739C88D46A3A3F8512FBE2CBEF5ED491CB01D424DBF343EBFA47D412156A5B063286D86344B127E69CEB44EC6F227561DE1D8B35EC2E6B2BB83A0F39668620826E54D155A145BF1DFFA5B60BD50ABCBA0D9A3784317D53C5C961F6B189878533664AAAEA66D7F6B5ABE7AB8A2329B690889E2F5088D8964CEFFA4BD4A69957BE9A90A9B47C0B5432281E391D8D0DA96D4B949B79724912E9159DBAEE8EE556B1CA7408E7D0B21620479CF82029E83237A5C59D2F6EEF4972A3EF782C5B47A7E27CCBCC4A4FBAD0742D074F13798D4683C0CA4036AA673A75CE8CA6524264383123CCFF8CD90620AF5023CE25F46B2ED3F79449AB417DB765E283B43F5EC7E0402AB9A4B271EC663CC64B8313338120D3B34003FA37E62601D0795B5DC7E2914C2C5FDDD3B175EE9513766213ED6F74C2B02E68DE34626EA8987C2796D8EC373C344A8B567647B28412C385ADB6CC10612A4CFCA997D4279E0DC5F1D6A677F11196EF0C171FAD7B06AF0D8319A2E897D08961B05AF8419517D9F49B5384114A3918F982F72AE256FC5A57CC98707EC1AADA6C2E6D1934A73A9AA0307733572C4C243D95F3DBDAC67244C2E918FB9F10092515E7A0FC2A11A40B53EDE63922A99E150051D4FFEED6A088AAB85C63E03D5BB2E3F8E21EE4E5EEBCA4EFBDF0349365422CF1921E818C738D2E5C66C01C31BA2D4855A765E2DE6D4026509FFEB30871BCB737C154521AD2D33CA392D780E4582F2211ADF57BE6A179F4FBB155B1D568378DC6F97E82FBA3666AD17CD50E9DF36524FDE778FEEECBA0BD1E092E8A1E75C6724505327E3C4DA69DD7B17046C236517B379958CEEB5E93442D3C7BB0B0A5A55C640C6A12DC252465C93890289416353E660E7F1A880FAFAAFA7F341822FB77ABAEB31481ED4C7FFADDAB7964D8081B697E025E06B0A203B401F61984076647C7AD254B2E64154598C20CA33B57470AB09491FD8343675BEF6FB06B7F0F8FC289C4EE01363E2911383A47E75D2388CE0127BD83476C163288B5078E32C541816C449C322B1C415431A95A0D5A3D2A5860D4745F0CF156D74793DC3120F77FBBE1E8C458E8FC9845ADB722803CD0DA744EA95AC1F9AFE1EF8C314076ED1FE804AA2F74690A67541FAFD7B3535CE76735D0C91EFBADA3A805C268C34F235DBB6957414295A2265FACC0B29F189495BB8710C1A9EE3B9D24C376E314B746FFCF2788BC64C3F783BD04541DBFAB145D253D7708D640B5A2A653E1FCA047D6CBEB80E1FE535BF4B06947DEEF56FEEED3D4D4C3E7122B727183AB75EA773395CDD24E97BD5972232F116CAC464931C10489017F1B49A714E9579174F46935510A577861067688EACF3E2B4AB7BF1AA28E2ED303C421538916D6E71EE23AEC0247BEDA5CF29CF328C01FB0C5A3E92B7A965960DEA68745C300BA2FB19A6036C9469B68F86021CBAD4CE896EDA73B226CFF27D011B13613910944608347214D9A927466B19F1D8BC4E235BDF180127625ABFB76B806269DDEEBFBDEA309C15A54E1970B080B06EC842EA8C3B20E19CDBB8CA170F30CE45201E22232C01EC6E97F6DD54B4A46C983C892A9BCFB4A86251BF7025F396BA67B0256183AE56A114B59CA4E49DD312BE83BF590905EDD1B6761AE490621553EBEF4B28479640C33D135D5C1610550373B95B3DFC49FCE73774AD7DE84C547CBB9D8A9D59E96B47E001ABD5B1DB76AADC2EA4F52F44827BA2A102122B7975F2514CB67F6CF73E0F5F7BE716CD259E5DC7B5B3850E99FD3581CBC7074744EECDBB88BD85881480BC77FF117D1DD41582BF19A41DCFB7FB3E6FE35627BC0BD041C8B199B00F57724795BC65AB53FA8C5FB2E4F312F322DCC75490AB0B4BC806A568372F04190F5FC3391C534C5ED1856DF30C278B07E32608EAFE1CF3B3FE5840CFD437E173C710804E20C0BF2FCE0FF1C416B750A0C313CD42F42EEC74575A92A70591D7E5A508C58F4214CF13AB01BB50CA558D6D4B6F2AE595F797C4F152BB9C5A98265C0D57DD8F54F1E656DC8197487A4F5D6FED61B8B6037E0A147E23A246A19B50F9042A97F085DBCE69DF601C08434254AA78D4591D5479A1F470CDD10CFC3D77992132D1B965F6DE91698583419C5AB5D341240DCDA265CCE3A526C01B4BE9D2715D471809E727693AD4A6F538AC3EE899A17383B2A32D49942184164C149C035145986F3C195802F2DD35701634DFAF7059690562FF1929BD7C4B5EE9691A78BFFEB17F5732F687240A15923AE951083EACA54B87CABF59057F0878C92673DC9CE6D1C7A82FF4CBACB14CA294F81C5A0927C8D4216E8181DDBB9DE4691E2B6C831A102A32402AE929885A47FD07E01D53F66B7E576EB04C3D106A89DFDE895AB681C103599DE6C5020E5B1127B5791C127DE41118EBAF8CE67630467222EBA726752EC143D13F86D23D2BEAC2301F99CBA4A0C7DCB6F3CEAFEFEC4FF775F0AE9D63CE8297A3D60C3ECE7115A5EB1BD6C8466BE64D3339B185583EB36F30C9E108F78AD47EEC70C3A893F5E13857BF2DF9AB37EB9BC272A8B35CF78E16D8E9D4370D16AE272EA7A8A9ABCAA56E5F9B48C84DE86FCDDDCDA425FEAC22934A82D33906E56C82A103A16E48C7A8D0CF85C21ED89B1851E3AA4ECD784A6696AA8B77BF59E8CF5C0826E486C5A8A04B6987D579CC137C3B74B4C4912F1A9C5AAC342C16C8D942E87E384798FD963EF769F15B242F835903AE4F22A6894C9A8C280638B0D5375A4C26617F404AC39BDA76009F4FEA4CC70BF98077D6FB3146C293FF0638B35B4384B09D0F2F6E070F477A02C43ED8134F7EB6F8FA1029E8B0D145B5ADAD55425368F19FFD5E96EEB0DAFA0121045CF0F58CFE5373EA9930B632A946AE2A88C5F348A7C1D062D730A1EAE1ADBF91E94663B22BA74366BD4722FC968A329C0B3A47F3DACFEB37D3D5EA284FC7E32D56B25F2D43124D404D2C1F0E2241EC86207CD0168CB1527A0A64C64F1BD899DF92489443EEF39495540B851454ACE34233CBCF1F24E7E3B2832F0290489492BEAFCCDA289E2D04971D7F74AEB5AC6015A59F9B29FAB5885B52473920D9FE6D9ADC1777D32809CC246025906D3E8DEAA6D316B87D0E397026E0B7EAD307516C3AF048B13BE0BCA93614A284B1ACE2E18B38D570FD7526076D18AFC91322A226A9789927387306D5D708543F977D74F43D4421ED94DEF8BCBCBA83FC54AB163FA84264998D2E7709CCC7B27DDDACBB4C36E2DB2C041CF8CD916F4D359B1A1BAFE22255475111403350FB321C1A737D04443EB13ED8300279D5AD9A2770C92183722483A6E35775E3261268B9AA82B2452ADA61430ECFBF0C1C43BD54A132A9AE9B300959D2B3EEA26B2F46C4C5FE10D48F7BDA0945E6CA68FCBD858B58B611FB60E823112557ADA08CA6A4078750B3B255819389C146D5D3B3315D8C8310F3305A7E82B3F4011A322FF661C6125EBDC0A8CB7036BFCE65653BA53AB261A673B4FD3A80FA447DBD6E5D4FECA828CDD3D4B4C1BBABC85E34B4478A01DD9EB367CEDBB731DE7DD7EBB6E7FC4CD3F0AF167695EED3AFB795D8FBF0779A6B94C2975DBD159913A8D2EDA581A7608D8F3CC463889BE2C5C2580292873515DE2DE1530FF0330AB0B3EDF697749A9D5EC4C5A54A1BD39AE7181ACA1E4D225B4444E1F24A97E450B627AAC0EB3C284F57DC37019EBDE6FE6D0DCD9BE709D56A4E07793264808D196443395625F7C29FD16E0D58C5B00D9AC03836550D1116CE15EBA6D528F79EADB92E55F6F1CB724176F0CC15A433EDE9DAE4A37577F3E17E35FF16F86A2AECF04ED7D070848F402C464FCBDD43361BFC1B9553AC3DE40B872249E32A4F048FCC0C6BE3029C3A313B04DC4B7DBC102769E20805DD3F6FECA3BA1ADD511C570A28877FD2CE053A3A79BF677652F1F834356502BC3118046A8CDDCA9313B86BA86B96A7D03F43074198492F9C233E767BDE5C20177BDB51337576DE84A7463C708AEF5A805DF738A6D518DA84BD5F0A85027C077F25C457FD15E607DC9E4AC091F89E9B956E6A4D8058F22812BBD132B1E96C267DD1C82F9E14F5AE1797FAB77CFBC902A26CCCAF17E85A6B27607DA636BAFB4C0922B3E69839B9472951BF1A66828A02973F2B4B664EC5F0B898B3D830ADB7B99DB854BA1CC145C1DD31259848756AFE490DE550FD174E6A03096175F7E7D65F6796BBB4E6E5E517B78E3AABF494608156357A3FE2205BE6D115A6911525CBAFE5DFEEFFCD816847FD40F88A21C99E8C2D94CC733D2FAC49F01E8D4B2DCF5D6F11432F1DDDA374444E7011565FB392F55C6ADAA3B2B49B97C310C12F313289BB03FFB5D35DFE20938900D8F850770935BABC45A8B7363FD2DED554CA799E8C938B3D517A6409F7F46B8A46917F58D9727C0754F5743E6AA1FA2FED3E91FEC0643EF517F544C7DE6CC44CA4A2EB4FAC158C7AD5A94B9E9007BCCD0D385D33E0F11F885103583E5C179B6EE69F5F0E7315ACDF5C10DB62CD312AE6D903D424EC036CFBEE7B20500A5EFCB95C158FC767373CB96794F0C859E91151F1DA15720F33A18E225C0B7133E70EB742A4AB04DFD49575C29ED82FDC68DEFC1C239353973D19F23EB93F00DEAF6911239C1E969C65B565F68E6A814CCA177EBD3D1A208192B437B996B406C1ADF49E30A6C4C5A8AD2C08F9C69C783B6A43DEA9A20F7CA775C2C8973636AD020CB61F7E2FAF1501CD2AC6E2D51E26F07C2109D4F2BA078C2FD426E1FF1B84146F09A9B6B32B17A856E990105A5C5E36531C30B07CE95E31A75BB6B251C40401A965DFD44183E03340A9ADAA7664F58296C48CE643798CEF96F79D79426EF31700306DCDB67FE2D103B70E755BE2277BD430B369A0AD46AEC77F3470457EEEF75F514513C0B6DAB9C44D817C2BD76238C766AB29399ECEB1D70CBAEDB9D50A9229D42F914901C2F62BA32C7D8795E3670A5C1D60AE5EE1AC35183591A9C7968730042F87A8B7E2678BC19F7BFA99CB005899EFA95401FF6CBCD0175967DED2B7F389EF912BA0E0C1098F77022AE4AF36E49A7A285D06954A511A6E383372B8932BC01EA3A14A550CFF2D008DAF42820D25BF9CDB41791C169219CB2B322181833134A76B1AE3BB7C4BE043109740A6C6D6C8F2AF5CFFAF05AF740FB60CF4C188413BF4161A5564F455A80E79B45074BE4AC79FC1A3D22F0FD6ABBB839A1A99671D9EF6BBCD6AAFF3C6AF5C1D29AA67ADD8D20F99D8C21573F8AFEA6B54D0F2E6B28791E86098079E56FF937E1938390BDF5C7CE9C7B15409C78BEA6C4339922C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: OPMPND+WenYue-GuDianMingChaoTi-NC-W519 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Identity/) def/Supplement 0 defend readonly def/FontName /OPMPND+WenYue-GuDianMingChaoTi-NC-W5 def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /cid1390 putdup 34 /cid1507 putdup 35 /cid1110 putdup 36 /cid1010 putdup 37 /cid1026 putdup 38 /cid3728 putdup 39 /cid3670 putdup 40 /cid3146 putreadonly def/$SubFontArray [/AAAAAH+WenYue-GuDianMingChaoTi-NC-W5 findfont /AAAAAI+WenYue-GuDianMingChaoTi-NC-W5 findfont ] def/CharProcs 10 dictdup /cid0 {(\000) 0 $SP} 2 index /.notdef 2 index put putdup /cid1010 {(\000) 1 $SP} putdup /cid1026 {(\001) 1 $SP} putdup /cid1110 {(\002) 1 $SP} putdup /cid1390 {(\003) 1 $SP} putdup /cid1507 {(\004) 1 $SP} putdup /cid3146 {(\005) 1 $SP} putdup /cid3670 {(\006) 1 $SP} putdup /cid3728 {(\007) 1 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/OPMPND+WenYue-GuDianMingChaoTi-NC-W5 cguidfix
/F1.1/OPMPND+WenYue-GuDianMingChaoTi-NC-W5 renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0 0 0 sc
0.60000002 i
q
0 0 450 163 rc
1 0 0 -1 21 150 cm
/F1.1[ 72 0 0 -72 0 0]sf
72 65 m
(!"#$%)[ 72.000000 72.000000 72.000000 72.000000 0.000000 ] xS
0 141 m
(&!"#'\()[ 72.000000 72.000000 72.000000 72.000000 72.000000 0.000000 ] xS
Q
q
33.415119 161.53699 m
33.282528 161.53699 33.155354 161.52209 33.024117 161.51804 c
32.991646 161.51938 32.963234 161.53699 32.929413 161.53699 c
26.858765 161.53699 21.884001 156.70647 21.468647 150.61279 c
20.752941 150.75224 20.031824 150.82806 19.308001 150.82806 c
12.786823 150.82806 7.4819412 145.41132 7.4819412 138.75175 c
7.4819412 135.70695 8.5737648 132.86794 10.503058 130.68961 c
9.7629995 130.52985 9.0513525 130.29156 8.3694706 129.99643 c
4.1347647 128.26216 1.1339412 124.0368 1.1339412 119.10203 c
1.1339412 119.08714 1.1420588 119.07495 1.1420588 119.06277 c
1.1420588 118.99914 1.1339412 118.93822 1.1339412 118.87459 c
1.1339412 113.09908 5.1251178 108.25908 10.43947 107.07717 c
8.550765 104.90424 7.4805884 102.08825 7.4805884 99.090828 c
7.4805884 92.433968 12.785471 87.017227 19.306646 87.017227 c
20.079176 87.017227 20.842236 87.093048 21.590412 87.241966 c
21.589058 87.158028 21.587706 87.07003 21.587706 86.977966 c
21.587706 80.318398 26.892588 74.901665 33.413765 74.901665 c
39.93494 74.901665 45.241177 80.318398 45.241177 86.977966 c
45.241177 148.67003 l
45.242531 155.52455 39.715763 161.53699 33.415119 161.53699 c
h
42.536648 86.977966 m
42.536648 81.813049 38.445354 77.609352 33.415119 77.609352 c
28.384882 77.609352 24.294941 81.811691 24.294941 86.977966 c
24.294941 87.59803 24.338236 87.729355 24.500587 88.212677 c
24.554707 88.371078 24.615589 88.560616 24.683235 88.779938 c
28.188705 90.793106 30.565823 94.624489 30.565823 99.017723 c
30.565823 99.766403 29.959705 100.37157 29.212883 100.37157 c
28.466059 100.37157 27.859941 99.766403 27.859941 99.017723 c
27.859941 94.035568 23.914764 89.982155 19.065823 89.982155 c
14.216883 89.982155 10.271706 94.035568 10.271706 99.017723 c
10.271706 99.135506 10.232471 99.241104 10.204059 99.350769 c
10.287941 102.50929 11.881706 105.37674 14.524 107.05551 c
15.050294 107.38856 15.280294 108.04111 15.080059 108.63139 c
14.879824 109.22166 14.306176 109.61563 13.68247 109.54659 c
13.444353 109.52628 13.203529 109.51003 12.96 109.51003 c
7.9311175 109.51003 3.8398235 113.71237 3.8398235 118.87594 c
3.8398235 122.72628 6.1154704 126.03914 9.3557644 127.47828 c
10.370471 127.90068 11.47447 128.13625 12.633942 128.13625 c
17.482882 128.13625 21.428059 124.08418 21.428059 119.10339 c
21.428059 118.35471 22.034176 117.74954 22.781 117.74954 c
23.527824 117.74954 24.133942 118.35471 24.133942 119.10339 c
24.133942 124.84099 20.076471 129.62413 14.737764 130.63815 c
14.709352 130.65846 14.691765 130.68553 14.662 130.7045 c
11.860059 132.4144 10.186471 135.42265 10.186471 138.75311 c
10.186471 143.91803 14.277764 148.12172 19.306646 148.12172 c
20.079176 148.12172 20.849001 147.98093 21.609352 147.77243 c
22.552353 142.26228 27.263294 138.05452 32.928059 138.05452 c
33.674881 138.05452 34.280998 138.6597 34.280998 139.40837 c
34.280998 140.15704 33.674881 140.76222 32.928059 140.76222 c
28.520176 140.76222 24.869942 144.11299 24.239471 148.46289 c
24.294941 148.64024 24.327412 148.82573 24.315235 149.00578 c
24.305765 149.15607 24.293589 149.30905 24.293589 149.46204 c
24.293589 154.62695 28.384882 158.83064 33.413765 158.83064 c
38.272175 158.83064 42.535294 154.0827 42.535294 148.67139 c
42.535294 86.977966 l
42.536648 86.977966 l
h
W
0 0 450 163 rc
-3.8660588 166.53699 m
50.241177 166.53699 l
50.241177 69.901665 l
-3.8660588 69.901665 l
h
f
Q
q
0 0 450 163 rc
1 0 0 -1 1.1339412 161.53699 cm
32.281178 0 m
32.14859 0 32.021412 0.014892308 31.890177 0.018953847 c
31.857706 0.0176 31.829294 0 31.795471 0 c
25.724823 0 20.750059 4.830523 20.334705 10.924185 c
19.618999 10.784739 18.897882 10.708923 18.174059 10.708923 c
11.652883 10.708923 6.348 16.125662 6.348 22.785231 c
6.348 25.83003 7.4398236 28.669046 9.3691177 30.847385 c
8.6290588 31.007139 7.9174118 31.245415 7.2355294 31.540554 c
3.0008235 33.27483 0 37.500183 0 42.434956 c
0 42.449844 0.0081176469 42.462032 0.0081176469 42.474216 c
0.0081176469 42.537846 0 42.59877 0 42.662399 c
0 48.437908 3.9911764 53.277908 9.3055296 54.459816 c
7.4168234 56.63274 6.3466473 59.448738 6.3466473 62.446156 c
6.3466473 69.103012 11.651529 74.519753 18.172707 74.519753 c
18.945236 74.519753 19.708294 74.443939 20.45647 74.295013 c
20.455118 74.378952 20.453764 74.466957 20.453764 74.559013 c
20.453764 81.218582 25.758648 86.635323 32.279823 86.635323 c
38.800999 86.635323 44.107235 81.218582 44.107235 74.559013 c
44.107235 12.866954 l
44.108589 6.0124307 38.581825 0 32.281178 0 c
h
41.402706 74.559013 m
41.402706 79.723938 37.311413 83.927628 32.281178 83.927628 c
27.25094 83.927628 23.160999 79.725296 23.160999 74.559013 c
23.160999 73.938957 23.204294 73.807632 23.366648 73.32431 c
23.420765 73.165909 23.481647 72.976372 23.549294 72.75705 c
27.054764 70.743874 29.431883 66.912491 29.431883 62.51926 c
29.431883 61.770584 28.825766 61.165417 28.078941 61.165417 c
27.332117 61.165417 26.726 61.770584 26.726 62.51926 c
26.726 67.501419 22.780823 71.554832 17.931883 71.554832 c
13.082941 71.554832 9.1377649 67.501419 9.1377649 62.51926 c
9.1377649 62.401478 9.0985298 62.295876 9.070118 62.186214 c
9.1540003 59.027691 10.747765 56.160248 13.390059 54.481476 c
13.916353 54.14843 14.146353 53.495876 13.946117 52.905602 c
13.745882 52.315323 13.172235 51.921352 12.54853 51.990398 c
12.310411 52.010708 12.069589 52.026955 11.826058 52.026955 c
6.7971764 52.026955 2.7058823 47.824615 2.7058823 42.661045 c
2.7058823 38.810707 4.9815292 35.497845 8.2218237 34.058708 c
9.2365294 33.636307 10.340529 33.400738 11.5 33.400738 c
16.348942 33.400738 20.294117 37.452801 20.294117 42.433601 c
20.294117 43.182278 20.900236 43.787445 21.647058 43.787445 c
22.393883 43.787445 23 43.182278 23 42.433601 c
23 36.695999 18.94253 31.912861 13.603824 30.89883 c
13.575412 30.878523 13.557823 30.851446 13.528059 30.832493 c
10.726118 29.122585 9.0525293 26.114338 9.0525293 22.783876 c
9.0525293 17.618954 13.143824 13.415261 18.172707 13.415261 c
18.945236 13.415261 19.715059 13.556062 20.475412 13.764554 c
21.418411 19.274708 26.129353 23.482462 31.794117 23.482462 c
32.540939 23.482462 33.14706 22.877293 33.14706 22.128616 c
33.14706 21.379938 32.540939 20.774769 31.794117 20.774769 c
27.386236 20.774769 23.736 17.424 23.10553 13.074092 c
23.160999 12.896738 23.19347 12.711262 23.181293 12.5312 c
23.171824 12.380923 23.159647 12.227939 23.159647 12.074954 c
23.159647 6.9100308 27.25094 2.7063384 32.279823 2.7063384 c
37.138237 2.7063384 41.401352 7.454277 41.401352 12.8656 c
41.401352 74.559013 l
41.402706 74.559013 l
h
S
Q
q
92.071884 119.10203 m
92.071884 124.0368 89.07106 128.26216 84.836349 129.99643 c
84.154472 130.29156 83.442825 130.52985 82.702766 130.68961 c
84.633415 132.86794 85.723885 135.70695 85.723885 138.75175 c
85.723885 145.41132 80.418999 150.82806 73.897827 150.82806 c
73.115822 150.82806 72.336533 150.74683 71.566704 150.58572 c
71.009293 156.71864 65.941177 161.53699 59.790707 161.53699 c
53.490059 161.53699 47.963295 155.52455 47.963295 148.67003 c
47.963295 86.977966 l
47.963295 80.318398 53.268177 74.901665 59.790707 74.901665 c
66.311882 74.901665 71.616768 80.318398 71.616768 86.977966 c
71.616768 87.07003 71.61541 87.159386 71.614059 87.241966 c
72.362236 87.093048 73.125298 87.017227 73.897827 87.017227 c
80.418999 87.017227 85.723885 92.433968 85.723885 99.090828 c
85.723885 102.0896 84.65506 104.90424 82.764999 107.07717 c
88.079353 108.25908 92.070526 113.09908 92.070526 118.87459 c
92.070526 118.93822 92.063766 118.99914 92.062408 119.06277 c
92.063766 119.07631 92.071884 119.08849 92.071884 119.10203 c
h
59.792057 87.028061 m
58.292999 87.028061 57.072647 88.247879 57.072647 89.74794 c
57.072647 91.248001 58.291649 92.46917 59.792057 92.46917 c
61.291119 92.46917 62.510117 91.249352 62.510117 89.74794 c
62.510117 88.247879 61.289764 87.028061 59.792057 87.028061 c
h
73.951942 97.118279 m
72.452881 97.118279 71.232529 98.338089 71.232529 99.838158 c
71.232529 101.33822 72.45153 102.55939 73.951942 102.55939 c
75.450996 102.55939 76.669998 101.33957 76.669998 99.838158 c
76.671356 98.339447 75.450996 97.118279 73.951942 97.118279 c
h
80.245827 109.51003 m
80.002296 109.51003 79.762825 109.52763 79.523354 109.54659 c
78.902351 109.60751 78.325996 109.22301 78.125763 108.63139 c
77.925529 108.03976 78.155533 107.38856 78.681824 107.05551 c
81.397179 105.33071 83.017998 102.35225 83.017998 99.090828 c
83.017998 94.420059 79.666763 90.546707 75.304886 89.848122 c
75.304886 94.602829 l
77.64006 95.208 79.375885 97.315941 79.375885 99.838158 c
79.375885 102.8315 76.943291 105.26707 73.951942 105.26707 c
70.960587 105.26707 68.526649 102.8315 68.526649 99.838158 c
68.526649 97.315941 70.263824 95.208 72.598999 94.602829 c
72.598999 89.831879 l
71.825119 89.945602 71.067474 90.148674 70.339592 90.464127 c
69.85659 90.671265 69.29512 90.58326 68.902763 90.232613 c
68.509056 89.881966 68.35482 89.335014 68.507706 88.831383 c
68.582115 88.583633 68.648415 88.387321 68.705238 88.214027 c
68.867592 87.730705 68.910881 87.599388 68.910881 86.979324 c
68.910881 82.286896 65.531235 78.400002 61.143646 77.725784 c
61.143646 84.513969 l
63.478825 85.119141 65.216003 87.225723 65.216003 89.74929 c
65.216003 92.742645 62.783413 95.178215 59.792057 95.178215 c
56.800705 95.178215 54.366764 92.742645 54.366764 89.74929 c
54.366764 87.227074 56.103943 85.119141 58.437763 84.513969 c
58.437763 77.725784 l
54.048824 78.400002 50.669178 82.286896 50.669178 86.979324 c
50.669178 114.81846 l
54.557529 114.81846 l
55.162292 112.48172 57.270176 110.74339 59.792057 110.74339 c
62.783413 110.74339 65.216003 113.1776 65.216003 116.17095 c
65.216003 119.16431 62.783413 121.59988 59.792057 121.59988 c
57.27153 121.59988 55.165001 119.86289 54.558884 117.52615 c
50.669178 117.52615 l
50.669178 135.952 l
59.790707 135.952 l
61.56847 135.952 l
67.346886 135.952 l
67.953003 133.61526 70.058174 131.87828 72.580055 131.87828 c
75.571411 131.87828 78.003998 134.31248 78.003998 137.30585 c
78.003998 140.29919 75.571411 142.73477 72.580055 142.73477 c
70.058174 142.73477 67.951645 140.99643 67.346886 138.6597 c
62.921413 138.6597 l
62.921413 144.0507 l
65.256592 144.65588 66.993767 146.76247 66.993767 149.28603 c
66.993767 152.27939 64.56118 154.71495 61.569824 154.71495 c
58.578472 154.71495 56.144531 152.27939 56.144531 149.28603 c
56.144531 146.76381 57.881706 144.65588 60.21553 144.0507 c
60.21553 138.6597 l
59.790707 138.6597 l
50.669178 138.6597 l
50.669178 148.67139 l
50.669178 154.0827 54.930943 158.83064 59.790707 158.83064 c
64.819588 158.83064 68.910881 154.62831 68.910881 149.46204 c
68.910881 149.30905 68.898705 149.15607 68.879768 148.87581 c
68.849998 148.41551 69.055649 147.97145 69.426353 147.69797 c
69.797058 147.4245 70.28006 147.3568 70.711647 147.52197 c
71.75341 147.92 72.824944 148.12038 73.896469 148.12038 c
78.925354 148.12038 83.016647 143.91803 83.016647 138.75175 c
83.016647 135.4213 81.344414 132.4117 78.541115 130.70314 c
78.512703 130.68419 78.493767 130.6571 78.465355 130.6368 c
73.126648 129.62413 69.069176 124.84099 69.069176 119.10203 c
69.069176 118.35336 69.675293 117.74818 70.422119 117.74818 c
71.168938 117.74818 71.775063 118.35336 71.775063 119.10203 c
71.775063 124.08283 75.720238 128.13489 80.569176 128.13489 c
81.728645 128.13489 82.832649 127.89797 83.847351 127.47828 c
87.087646 126.03914 89.363297 122.72492 89.363297 118.87594 c
89.365997 113.71101 85.274704 109.51003 80.245827 109.51003 c
h
57.072647 116.17095 m
57.072647 117.67101 58.291649 118.89218 59.792057 118.89218 c
61.291119 118.89218 62.510117 117.67237 62.510117 116.17095 c
62.510117 114.67225 61.291119 113.45108 59.792057 113.45108 c
58.291649 113.45243 57.072647 114.67225 57.072647 116.17095 c
h
61.569824 146.5675 m
60.070766 146.5675 58.85041 147.78732 58.85041 149.28738 c
58.85041 150.78745 60.069412 152.00862 61.569824 152.00862 c
63.068882 152.00862 64.28788 150.7888 64.28788 149.28738 c
64.28788 147.78732 63.067528 146.5675 61.569824 146.5675 c
h
69.862 137.30585 m
69.862 138.80591 71.081001 140.02708 72.581413 140.02708 c
74.080467 140.02708 75.299469 138.80727 75.299469 137.30585 c
75.299469 135.80714 74.080467 134.58597 72.581413 134.58597 c
71.081001 134.58597 69.862 135.80579 69.862 137.30585 c
h
W
0 0 450 163 rc
42.963295 166.53699 m
97.071884 166.53699 l
97.071884 69.901665 l
42.963295 69.901665 l
h
f
Q
q
0 0 450 163 rc
1 0 0 -1 47.963295 161.53699 cm
44.108589 42.434956 m
44.108589 37.500183 41.107765 33.27483 36.873058 31.540554 c
36.191177 31.245415 35.47953 31.007139 34.739471 30.847385 c
36.670116 28.669046 37.76059 25.83003 37.76059 22.785231 c
37.76059 16.125662 32.455708 10.708923 25.93453 10.708923 c
25.152529 10.708923 24.373236 10.790154 23.603413 10.951262 c
23.046 4.8183384 17.977882 0 11.827412 0 c
5.5267649 0 0 6.0124307 0 12.866954 c
0 74.559013 l
0 81.218582 5.3048825 86.635323 11.827412 86.635323 c
18.348589 86.635323 23.653471 81.218582 23.653471 74.559013 c
23.653471 74.466957 23.652117 74.377602 23.650764 74.295013 c
24.398941 74.443939 25.162001 74.519753 25.93453 74.519753 c
32.455708 74.519753 37.76059 69.103012 37.76059 62.446156 c
37.76059 59.447384 36.691765 56.63274 34.801704 54.459816 c
40.116058 53.277908 44.107235 48.437908 44.107235 42.662399 c
44.107235 42.59877 44.100471 42.537846 44.099117 42.474216 c
44.100471 42.460678 44.108589 42.448494 44.108589 42.434956 c
h
11.828765 74.508926 m
10.329706 74.508926 9.1093531 73.289108 9.1093531 71.789047 c
9.1093531 70.288986 10.328353 69.067818 11.828765 69.067818 c
13.327824 69.067818 14.546824 70.287628 14.546824 71.789047 c
14.546824 73.289108 13.32647 74.508926 11.828765 74.508926 c
h
25.988647 64.418709 m
24.489588 64.418709 23.269236 63.198891 23.269236 61.69883 c
23.269236 60.198769 24.488235 58.9776 25.988647 58.9776 c
27.487705 58.9776 28.706705 60.197414 28.706705 61.69883 c
28.708059 63.19754 27.487705 64.418709 25.988647 64.418709 c
h
32.282528 52.026955 m
32.039001 52.026955 31.79953 52.009354 31.560059 51.990398 c
30.939058 51.929478 30.362705 52.313969 30.16247 52.905602 c
29.962234 53.497231 30.192236 54.14843 30.718529 54.481476 c
33.433884 56.206276 35.054707 59.184738 35.054707 62.446156 c
35.054707 67.11692 31.70347 70.99028 27.341589 71.688858 c
27.341589 66.934151 l
29.676765 66.328987 31.412588 64.221046 31.412588 61.69883 c
31.412588 58.705479 28.98 56.269909 25.988647 56.269909 c
22.997293 56.269909 20.563353 58.705479 20.563353 61.69883 c
20.563353 64.221046 22.300529 66.328987 24.635706 66.934151 c
24.635706 71.705109 l
23.861824 71.591385 23.104176 71.388306 22.376293 71.072861 c
21.893293 70.865723 21.331823 70.95372 20.93947 71.304367 c
20.545765 71.655014 20.391529 72.201973 20.544413 72.705597 c
20.618824 72.953354 20.685118 73.149658 20.741941 73.322952 c
20.904295 73.806274 20.947588 73.937599 20.947588 74.557663 c
20.947588 79.250092 17.567942 83.136986 13.180353 83.811203 c
13.180353 77.023018 l
15.51553 76.417847 17.252707 74.311264 17.252707 71.787689 c
17.252707 68.794342 14.820118 66.358772 11.828765 66.358772 c
8.8374119 66.358772 6.4034705 68.794342 6.4034705 71.787689 c
6.4034705 74.309906 8.1406469 76.417847 10.47447 77.023018 c
10.47447 83.811203 l
6.0855293 83.136986 2.7058823 79.250092 2.7058823 74.557663 c
2.7058823 46.718525 l
6.5942354 46.718525 l
7.1989999 49.05526 9.3068819 50.793598 11.828765 50.793598 c
14.820118 50.793598 17.252707 48.359386 17.252707 45.366032 c
17.252707 42.372677 14.820118 39.937107 11.828765 39.937107 c
9.3082352 39.937107 7.2017059 41.674091 6.5955882 44.01083 c
2.7058823 44.01083 l
2.7058823 25.584984 l
11.827412 25.584984 l
13.605177 25.584984 l
19.383589 25.584984 l
19.989706 27.921722 22.094883 29.658709 24.616764 29.658709 c
27.608118 29.658709 30.040707 27.224493 30.040707 24.231138 c
30.040707 21.237785 27.608118 18.802216 24.616764 18.802216 c
22.094883 18.802216 19.988354 20.540554 19.383589 22.877293 c
14.958117 22.877293 l
14.958117 17.486277 l
17.293295 16.881107 19.03047 14.774523 19.03047 12.250954 c
19.03047 9.2575998 16.597883 6.8220305 13.606529 6.8220305 c
10.615176 6.8220305 8.1812353 9.2575998 8.1812353 12.250954 c
8.1812353 14.77317 9.9184122 16.881107 12.252235 17.486277 c
12.252235 22.877293 l
11.827412 22.877293 l
2.7058823 22.877293 l
2.7058823 12.8656 l
2.7058823 7.454277 6.9676471 2.7063384 11.827412 2.7063384 c
16.856295 2.7063384 20.947588 6.9086771 20.947588 12.074954 c
20.947588 12.227939 20.935411 12.380923 20.916471 12.661169 c
20.886705 13.121477 21.092354 13.565538 21.463058 13.839015 c
21.833765 14.112493 22.316765 14.180184 22.748352 14.015016 c
23.790117 13.616984 24.861647 13.416615 25.933176 13.416615 c
30.962059 13.416615 35.053352 17.618954 35.053352 22.785231 c
35.053352 26.115692 33.381119 29.125292 30.577824 30.833847 c
30.549412 30.8528 30.53047 30.879877 30.502058 30.900185 c
25.163353 31.912861 21.105883 36.695999 21.105883 42.434956 c
21.105883 43.183632 21.712 43.788799 22.458824 43.788799 c
23.205647 43.788799 23.811764 43.183632 23.811764 42.434956 c
23.811764 37.454155 27.756941 33.402092 32.605881 33.402092 c
33.765354 33.402092 34.869354 33.639015 35.88406 34.058708 c
39.124352 35.497845 41.400002 38.812061 41.400002 42.661045 c
41.402706 47.82597 37.311413 52.026955 32.282528 52.026955 c
h
9.1093531 45.366032 m
9.1093531 43.865971 10.328353 42.644798 11.828765 42.644798 c
13.327824 42.644798 14.546824 43.864616 14.546824 45.366032 c
14.546824 46.864738 13.327824 48.085907 11.828765 48.085907 c
10.328353 48.084553 9.1093531 46.864738 9.1093531 45.366032 c
h
13.606529 14.969477 m
12.107471 14.969477 10.887117 13.749661 10.887117 12.2496 c
10.887117 10.749538 12.106117 9.5283689 13.606529 9.5283689 c
15.105588 9.5283689 16.324589 10.748184 16.324589 12.2496 c
16.324589 13.749661 15.104236 14.969477 13.606529 14.969477 c
h
21.898706 24.231138 m
21.898706 22.731077 23.117706 21.509907 24.618118 21.509907 c
26.117176 21.509907 27.336176 22.729723 27.336176 24.231138 c
27.336176 25.729847 26.117176 26.951015 24.618118 26.951015 c
23.117706 26.951015 21.898706 25.731199 21.898706 24.231138 c
h
S
ep
end
